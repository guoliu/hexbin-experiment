<html>
<head>
<link rel="stylesheet" href="nouislider.min.css">
</head>
<body>
<style>

.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.hexagon {
  fill: none;
  stroke: #000;
  stroke-width: .5px;
}

.slider-container {
  margin: 10px;
  display: inline-block;
  width: 200px;
  height: 20px;
}

</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="d3.hexbin.min.js"></script>
<script type="text/javascript" src="nouislider.min.js"></script>

<body>
  <div id='sliders'>
  <p>
  n: total number of pionts;<br />
  rad: radius in hexbin plot;<br />
  binMax: max number of points in hexbin color map;<br />
  alpah: alpha in scatter plot; <br />
  size: size of dots in scatter plot. <br />
  </p>
  </div>

  <div id='hex'></div>
  <div id='scatter'></div>
</body>

<script>


var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

function slider(name, start, min, max) {
  var element = document.createElement('div');
  element.id = name + 'Slider';

  noUiSlider.create(element, {
      start: [start],
      range: {
        'min': [min],
        'max': [max]
      }
    });
  element.noUiSlider.on('slide', update);

  var valueElem = document.createElement('div');
  valueElem.id = name + 'Slider-value';

  element.noUiSlider.on('update', function( values, handle ) {
    valueElem.innerHTML = name + ': ' + values[handle];
  });

  var sliderContainer = document.createElement('div');
  sliderContainer.className = 'slider-container';
  sliderContainer.appendChild(element);
  sliderContainer.appendChild(valueElem);

  document.getElementById('sliders').appendChild(sliderContainer);

  return element;
}

nSlider = slider('n', 2000, 100, 10000);

radSlider = slider('rad', 20, 2, 100);
binMaxSlider = slider('binMax', 20, 5, 100)

alphaSlider = slider('alpha', .1, .01, .5)
sizeSlider = slider('size', 3, .5, 8)

function update() {

  d3.select("#hex").selectAll('svg').remove();
  d3.select("#scatter").selectAll('svg').remove();

  var n = nSlider.noUiSlider.get(),
      rad = radSlider.noUiSlider.get(),
      alpha = alphaSlider.noUiSlider.get()
      binMax = binMaxSlider.noUiSlider.get()
      size = sizeSlider.noUiSlider.get();

  var randomX1 = d3.random.normal(width*2 / 5, 80),
      randomX2 = d3.random.normal(width*3 / 5, 80),

      randomY1 = d3.random.normal(height*3 / 7, 80),
      randomY2 = d3.random.normal(height*5 / 7, 80),

      points1 = d3.range(Math.round(n/2)).map(function() { return [randomX1(), randomY1()]; }),
      points2 = d3.range(Math.round(n/2)).map(function() { return [randomX2(), randomY2()]; }),

      points = points1.concat(points2);

  var color = d3.scale.linear()
      .domain([0, binMax])
      .range(["white", "black"])
      .interpolate(d3.interpolateLab);

  var hexbin = d3.hexbin()
      .size([width, height])
      .radius(rad);

  var x = d3.scale.identity()
      .domain([0, width]);

  var y = d3.scale.linear()
      .domain([0, height])
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom")
      .tickSize(6, -height);

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      .tickSize(6, -width);

  var svg = d3.select("#hex").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.append("clipPath")
      .attr("id", "clip")
    .append("rect")
      .attr("class", "mesh")
      .attr("width", width)
      .attr("height", height);

  svg.append("g")
      .attr("clip-path", "url(#clip)")
    .selectAll(".hexagon")
      .data(hexbin(points))
    .enter().append("path")
      .attr("class", "hexagon")
      .attr("d", hexbin.hexagon())
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .style("fill", function(d) { return color(d.length); });

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);
 

  var svg = d3.select("#scatter").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.append("clipPath")
      .attr("id", "clip")
    .append("rect")
      .attr("class", "mesh")
      .attr("width", width)
      .attr("height", height);

  svg.append("g")
    .selectAll(".hexagon")
      .data(points)
    .enter().append("circle")
      .attr("r", size)
      .attr("cx", function(d) {return d[0]})
      .attr("cy", function(d) {return d[1]})
      .style("fill", function(d) { return "rgba(0,0,0," + alpha + ")"; });

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);}

update();

</script>
